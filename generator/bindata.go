// Code generated for package generator by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/index.html
// template/manifest.plist
package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x53\xe3\x3a\x12\x7e\xe7\x57\x68\x7c\xaa\x96\x99\x02\xdb\xb9\x91\x70\x98\x98\x3d\x84\x30\xdc\x6f\x09\xf7\x37\x59\xea\xc4\x72\x64\xc9\x48\x72\x12\x43\xcd\x7f\xdf\xb2\x1d\x43\xc2\x24\xb5\xcc\xd9\x3d\x7e\xc0\x4a\x5f\x3e\xe9\xeb\x6e\x75\xe3\xf6\x97\xee\xe5\xfe\xcd\xe3\xd5\x01\x0a\x4c\xc4\x77\xd7\xda\x5f\x6c\x5b\x27\x71\xac\x40\x6b\x74\xd2\xbf\x15\x0a\xb4\xe4\x63\xa0\x67\xcc\x57\x58\xa5\xb7\xbd\x33\x64\xdb\xbb\x6b\xed\xcc\x1c\x71\x2c\x86\x9e\x05\xc2\xca\x04\x80\xe9\xee\x1a\x42\x08\x65\x18\xa8\x07\xcf\x09\x53\x40\x51\x04\x06\x23\x83\x87\x3a\xf7\xcb\xf5\xb9\x88\x04\x58\x69\x30\x9e\x95\x98\x81\xbd\x6d\xb9\xf3\x3a\x81\x23\xf0\xac\x31\x83\x49\x2c\x95\xb1\x10\x91\xc2\x80\x30\x9e\x35\x61\xd4\x04\x1e\x85\x31\x23\x60\xe7\x3f\x36\x11\x13\xcc\x30\xcc\x6d\x4d\x30\x07\xaf\xba\x89\x74\xa0\x98\x18\xd9\x46\xda\x03\x66\x3c\x21\x33\xec\xf7\x83\x75\xa4\x34\xda\x28\x1c\xa3\xfd\x7e\xff\xfd\x4c\x9c\x89\x11\x52\xc0\x3d\x4b\x9b\x94\x83\x0e\x00\x8c\x95\xab\x8a\x27\x50\x30\xf0\xac\xc0\x98\x58\xef\xb8\x2e\xa1\xc2\x09\x35\x05\xce\xc6\xca\x11\x60\x5c\x11\x47\xae\x5f\x22\xff\xd5\x70\xb6\x9c\xba\x4b\x99\x36\x2e\xd1\xfa\x5d\xe1\x44\x4c\x38\x44\xeb\x79\x60\x26\x0c\x0c\x15\x33\xa9\x67\xe9\x00\xd7\xb7\x1b\xf6\xcd\xc3\xb6\xa9\xb5\x0e\x48\xef\xa0\x0e\x2e\x0b\x6e\x5b\x2f\xd1\xf5\xf4\x4e\x90\xee\x5e\xba\x95\x1c\x9f\xbe\x34\xd4\xc1\x68\x78\xfc\x00\xe7\x40\x1b\xe7\x95\x90\x0f\x8e\xbb\x57\xe3\x61\x33\x79\x3e\x3d\xae\x4d\x1f\x54\x6d\x1e\x9d\x28\xa9\xb5\x54\x6c\xc8\x84\x67\x61\x21\x45\x1a\xc9\x44\x2f\x46\xa4\xad\x89\x62\xb1\x41\x5a\x91\x45\x86\x0a\x4f\x86\xcc\x38\x44\x46\x2e\xc5\x63\x46\x75\xc0\xa2\x50\xbb\xcf\x8a\x48\x0a\xa1\x76\x87\x81\x1d\xe3\x21\x94\x92\x9c\x5d\xa8\xad\xdd\xb6\x5b\x20\xee\xbe\x87\x77\xc5\x16\xa1\x76\x08\x97\x09\x1d\x70\xac\x20\xdf\x08\x87\x78\xea\x72\xe6\xcf\x6d\x53\x75\x2a\x4e\x65\xe5\x1e\x33\x22\x86\x19\x0e\xbb\xaf\xaf\xce\x4d\xb6\xf8\xf9\xb3\xed\x16\x92\xb5\xb6\x5b\x54\x66\xdb\x97\x34\xdd\x5d\x5b\x6b\x0b\x3c\x46\x84\x63\xad\x3d\x4b\xe0\xb1\x8f\x15\x2a\x5e\x36\xc5\x6a\x84\xfc\x61\xfe\xb6\xe6\x4a\xf9\xa2\xb0\x9a\x15\x61\x51\xfe\xae\xc0\xe3\x0c\x8c\xb2\x37\xb0\x4c\x8f\x99\x00\x55\xfa\xce\xe9\x94\x9c\xa0\x30\xd1\x86\x0d\x52\x7b\x86\x63\x13\x10\xe6\xcd\xf8\xa3\x03\x91\xdc\x8e\xa8\x8d\x13\x23\xe7\x2c\x3e\x5a\x85\x49\xe4\x4b\xa3\xa4\xf8\x60\x93\xdb\x05\xd5\xd2\x8c\x32\x1d\x73\x9c\xda\x0d\x6b\x21\x40\x41\x75\x16\xbc\x45\xb7\xc6\xaf\x58\x45\x0a\x63\x2c\x4a\x44\x1f\xd3\x21\xa0\xfc\xaf\x1d\x2b\x16\x61\x95\xe6\xd8\x57\x1c\x9b\x81\x54\x51\x06\x9f\xd9\xff\x26\x54\x11\xf9\xd7\x57\xa7\xa3\xb0\x20\xc1\xdf\x44\xd1\x09\x21\xa0\x75\x01\x94\x08\xca\xe1\x0e\x94\x66\x52\xfc\x4d\x3c\x26\x06\x72\x06\xc6\x38\xbd\x48\x22\x1f\xd4\x6a\xa8\xb6\x9b\x45\xf0\x57\x71\x5c\x42\x73\xc0\x74\x49\xbe\xb2\xe7\xf5\xd5\x39\x29\x53\xda\x85\xa2\xc0\xf3\x73\x2f\xd9\x25\x5e\x9a\x3c\x55\xee\x12\x65\xe9\x76\x97\xd9\x7c\xae\x2c\x11\xa3\x9e\x55\xdc\xb9\xec\xb2\x51\x36\x5e\x4a\x6a\x77\xc5\x41\x70\xee\xcf\x4c\xa4\x6d\x0d\x2a\x6b\xd7\x0b\x4d\xef\xed\x29\xc3\x6d\x04\xf2\x8d\x28\x6b\x29\x5f\xf3\x61\xfe\xf2\xb9\x24\xa3\xa5\xbe\x45\x4b\x5e\xd8\x63\xc7\x75\xff\x8d\x49\x16\x33\x8f\xca\x89\xe0\x12\x53\x3b\xc2\x82\x0d\x40\x9b\x7f\x25\x8a\x7b\x65\xef\x81\x29\x8e\x62\x5e\xb4\x1c\x26\xb4\xc1\x9c\xbb\xa5\xa1\x13\x73\xa6\xcd\xd2\x2d\x95\xe4\xe0\x59\x7e\x62\xcc\xd2\x3b\x87\x8a\x1c\x1e\x17\x80\x9d\xdc\xec\x06\xa6\x66\x69\x02\xf1\x87\xb8\xcd\x82\xbc\xe4\xe7\x6c\x59\x66\x21\x6f\x4a\x97\x79\x65\x60\x8e\x4e\xf0\x18\xf7\xf3\x4a\xf9\x8e\x48\x20\xa5\x06\x24\x05\x20\x39\x40\x26\x00\x64\x26\xf2\x4b\xde\xb1\xe6\xbd\x50\x75\x07\x85\xd7\x09\xa8\x14\x61\x41\xe7\x26\x62\x71\x5b\xd0\x57\x26\x08\x4f\x28\x68\x74\x25\xe3\x18\xd4\xb7\xa2\xe7\x2d\xed\xe1\x59\x4f\x0e\x9f\x33\xac\x3c\x96\xc5\xd2\xae\x3b\x5b\x4e\xd5\xd1\x9c\x45\x65\xc3\x7e\xe3\xf5\xeb\xbc\xeb\x0e\x1e\xe8\x4b\x2d\x30\x57\x47\x15\xae\xfb\x7d\xbd\x25\xf6\x6f\xe2\x24\x74\x5f\xd2\xc6\xfe\xc6\xe5\x61\x8c\x23\xf9\xe3\x2e\xad\x6f\x9f\xdf\x75\xc4\xc1\xc6\xb1\xef\xdf\x3d\xde\xc2\x64\xe3\x52\xed\x3f\xe0\xde\x68\x10\xbe\x63\xaf\x98\x76\x59\xe8\xde\xa6\xc5\xca\x69\xf7\xb9\x79\x1e\xce\x8f\x73\x3f\x8f\xd7\x27\x28\x06\x72\x23\x6c\x85\xe9\xfd\xe9\xf6\xe0\xe2\x1a\x36\xf6\xaa\xb5\x23\x7f\x7b\x2f\xe8\x3d\xd7\x9a\x67\xea\xc9\x3d\x89\xc9\xed\xe1\xe1\xa5\xd8\x78\x6c\xf5\xf4\x04\x2e\x94\xb9\x70\xcd\x41\xfd\x5c\x9e\xb6\x9e\xe0\xa9\x9b\x4e\x7f\x93\xe2\x5c\xaa\x6b\x65\xaa\x37\x67\xc9\x74\x42\xbd\xf9\x21\xed\x27\xfd\xff\x31\xb9\xff\x44\x52\x57\x32\x7d\x27\xfa\xf9\x54\xc6\x25\xf5\xbf\xaa\x4e\xb5\xe9\x54\x8b\x5c\x26\x11\x2d\x35\xab\x89\xfc\xe9\x2a\xf8\x71\x73\xb8\x77\xbf\x5d\x3f\xb8\xaf\xf5\xba\x49\xad\x5f\xb9\x3b\xc5\xc7\x2f\x38\xae\x1f\x35\x9b\xfc\xe9\x68\xbb\x7a\x25\x1f\xf9\x8f\xc0\x3f\xbc\xdd\x68\x76\x9e\xe2\xe6\x61\x4b\xb0\xa4\x55\xdf\xea\x8f\x5a\xfc\xe2\xff\x4b\xe4\xbf\xd7\xe4\x6a\x26\x93\xea\x75\x43\xaa\xc7\xb0\x73\x2d\x28\x19\xc9\xe6\x39\x8b\xee\xfc\x97\xc7\x8a\x19\xc6\x8d\xf8\xbe\xd3\xe0\x4f\x2d\xae\xea\x95\xfb\xd3\x97\xca\x58\xb9\xf8\xfe\x34\x78\xa0\x9d\x8b\xe8\xc2\xdf\xea\xfe\x59\x1b\xb7\xf4\x67\x98\x14\xad\x66\x46\xc7\xa4\x31\x78\x96\x81\xa9\x71\x43\x3c\xc6\x85\x74\xd6\x36\x89\x14\xda\xa0\x62\xc0\x20\x0f\x09\x98\xa0\xeb\xde\xbe\xa4\xf0\x95\x4a\x92\x44\x20\x8c\x33\x04\x73\xc0\x21\x5b\x76\xd2\x63\xfa\x75\xbd\x30\x5e\xff\xb6\x89\x5e\xdf\xae\x43\x06\xbe\x83\x26\x4c\x50\x39\x71\xb8\x24\x38\x2b\x7a\x27\x9b\x0c\x9b\x6f\x36\xf9\x77\xc2\x0e\xaa\x6d\x35\xdf\x65\x01\xb0\x61\x60\x3e\x08\x89\xe4\x52\x75\xb1\x1a\xed\xa0\xf5\x3f\x2a\xf9\xb3\xfe\x41\x7b\x56\xb8\xad\xff\x31\xc8\x9f\x05\xb5\x52\x40\xcc\x19\x8c\x81\xef\xcc\xb8\x38\xfb\x73\x42\xe7\xa8\x30\xfe\xf9\xed\x7b\xd1\xf8\x39\x18\x24\x0a\xfa\x2b\x39\x2f\x4c\xb7\xf5\x6f\xdf\x73\xc7\xcc\x29\xe7\x88\x3c\xf4\x9b\xf3\xcf\x42\x1b\x4b\xa3\xe5\x28\x88\x39\x26\xf0\xd5\x65\x82\xc2\xd4\xc9\x3e\xef\xdc\x4d\xb4\xbe\x38\x13\xb3\x03\xcc\xf7\x19\xb7\xf8\x9f\xba\xed\x16\x1f\x8f\xff\x09\x00\x00\xff\xff\xcc\x80\xf4\x24\x4d\x0e\x00\x00")

func templateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateIndexHtml,
		"template/index.html",
	)
}

func templateIndexHtml() (*asset, error) {
	bytes, err := templateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateManifestPlist = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x51\x6b\xdb\x30\x10\xc7\x9f\xed\x4f\xa1\xe9\x5d\x56\xf2\x36\x86\xea\xb2\x36\x2d\x04\xc2\x66\x88\x3b\xd8\xa3\x1a\x5d\xd2\x23\xb2\x6c\xa4\xf3\xb2\xb4\xf4\xbb\x0f\xc7\x6e\xa2\x74\x5e\xd7\x87\xed\x4d\x48\xbf\xff\xdd\xcf\xc7\x59\x5d\xfe\xac\x2c\xfb\x01\x3e\x60\xed\x2e\xf8\x34\x9b\x70\x06\x6e\x55\x1b\x74\x9b\x0b\x7e\x57\xde\x8a\x8f\xfc\x32\x4f\xd5\x87\xd9\xd7\xeb\xf2\x7b\x71\xc3\x1a\x8b\x81\x58\x71\x77\xb5\x98\x5f\x33\x2e\xa4\xfc\xdc\x34\x16\xa4\x9c\x95\x33\x56\x2c\xe6\xcb\x92\x4d\xb3\x89\x94\x37\x5f\x38\xe3\x0f\x44\xcd\x27\x29\x77\xbb\x5d\xa6\x3b\x2a\x5b\xd5\x55\x07\x06\x59\xf8\xba\x01\x4f\xfb\x05\x06\x12\xd3\x6c\x92\x19\x32\x3c\x4f\x55\x5f\xfd\x4c\x27\x4f\x95\xc1\x15\xe5\x69\xa2\xb6\xb0\xcf\x91\xa0\x0a\x4a\x76\xc7\x34\x51\xda\x7b\xdd\x1d\x92\x17\x26\xe9\x29\x1d\x02\xd0\x11\x4b\x22\x30\x46\x07\x78\x8b\xce\x9c\xd0\x24\x51\x81\x3c\xba\x4d\x1e\xea\x35\xed\xb4\x07\xd1\xe8\xd5\x56\x6f\x40\xc9\xe1\x21\xca\xb6\xde\x8e\x45\x9f\x9e\xb2\xe5\x90\x2e\xfa\xf0\xf3\xf3\x79\x5c\xc9\x93\xc6\xbb\x8d\x0c\x86\xc6\xea\xbd\xc0\xea\x0f\x3a\x0e\xc0\x04\x11\x1e\xd0\xc1\x59\x9e\x7c\x0b\xf2\x7d\xde\xb3\xbe\xc7\xbc\xfa\x57\xd2\xeb\xd6\x5a\x11\xf0\x11\xfe\xab\xf6\x6d\x6b\xed\x12\x1f\xe1\x6f\xde\x4a\x9e\x56\xe1\x50\xb2\x02\xd2\x46\x93\x8e\x96\x25\xfa\xc8\xee\xee\xbe\x75\xc6\x82\x40\x03\x8e\x70\x8d\xe0\x23\x85\xc8\xe0\xea\x80\xcd\x8f\xd4\x6f\x12\x51\xad\x61\xc3\xdf\x2a\xf4\xad\x47\x46\xab\xbc\x1a\xf5\xeb\x85\x1d\x49\x84\xf6\x9e\x90\x2c\x8c\x77\x5c\x0e\xaf\xa3\xcd\xde\xc8\x95\x23\xa1\xd3\xac\x8f\xa7\xe3\xcc\x5f\x6e\x94\x3c\xfc\xe8\x79\xfa\x2b\x00\x00\xff\xff\x83\xed\xd1\x1c\x7f\x04\x00\x00")

func templateManifestPlistBytes() ([]byte, error) {
	return bindataRead(
		_templateManifestPlist,
		"template/manifest.plist",
	)
}

func templateManifestPlist() (*asset, error) {
	bytes, err := templateManifestPlistBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/manifest.plist", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/index.html":     templateIndexHtml,
	"template/manifest.plist": templateManifestPlist,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"index.html":     &bintree{templateIndexHtml, map[string]*bintree{}},
		"manifest.plist": &bintree{templateManifestPlist, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
