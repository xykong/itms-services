// Code generated for package generator by go-bindata DO NOT EDIT. (@generated)
// sources:
// template/index.html
// template/manifest.plist
package generator

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5b\x53\xe3\x3a\x12\x7e\xe7\x57\x68\x7c\xaa\x96\x99\x02\xdb\xb9\x91\x70\x98\x98\x3d\x13\xc2\x40\xb8\x43\xb8\xbf\xc9\x52\xc7\x96\x23\x4b\x46\x92\x73\x21\xc5\x7f\xdf\xb2\x1d\x43\x60\x92\x5a\xe6\xec\x1e\x3d\xc4\x8a\xf4\xe9\x93\xbe\xee\x56\xb7\xdd\xfe\xd2\x3d\xdf\xbb\x7e\xb8\xd8\x47\xa1\x89\xf9\xee\x5a\xfb\x8b\x6d\xeb\x34\x49\x14\x68\x8d\x8e\xfa\x37\x42\x81\x96\x7c\x04\xf4\x84\xf9\x0a\xab\xe9\xcd\xd5\x09\xb2\xed\xdd\xb5\x76\x06\x47\x1c\x8b\xc0\xb3\x40\x58\xd9\x00\x60\xba\xbb\x86\x10\x42\x19\x07\xba\x82\xa7\x94\x29\xa0\x28\x06\x83\x91\xc1\x81\xce\xd7\xe5\xf3\xf9\x10\x09\xb1\xd2\x60\x3c\x2b\x35\x03\x7b\xdb\x72\x17\xe7\x04\x8e\xc1\xb3\x46\x0c\xc6\x89\x54\xc6\x42\x44\x0a\x03\xc2\x78\xd6\x98\x51\x13\x7a\x14\x46\x8c\x80\x9d\xff\xd9\x44\x4c\x30\xc3\x30\xb7\x35\xc1\x1c\xbc\xea\x26\xd2\xa1\x62\x62\x68\x1b\x69\x0f\x98\xf1\x84\xcc\xb8\xdf\x0e\xd6\x91\xd2\x68\xa3\x70\x82\xf6\xfa\xfd\xb7\x33\x71\x26\x86\x48\x01\xf7\x2c\x6d\xa6\x1c\x74\x08\x60\xac\x7c\xaa\x68\xa1\x82\x81\x67\x85\xc6\x24\x7a\xc7\x75\x09\x15\x4e\xa4\x29\x70\x36\x52\x8e\x00\xe3\x8a\x24\x76\xfd\x92\xf9\xaf\x86\xb3\xe5\xd4\x5d\xca\xb4\x71\x89\xd6\x6f\x13\x4e\xcc\x84\x43\xb4\x5e\x24\x66\xc2\x40\xa0\x98\x99\x7a\x96\x0e\x71\x7d\xbb\x61\x5f\xdf\x6f\x9b\x5a\x6b\x9f\x5c\xed\xd7\xc1\x65\xe1\x4d\xeb\x39\xbe\x9c\xdc\x0a\xd2\xfd\x31\xdd\x4a\x7b\xc7\xcf\x0d\xb5\x3f\x0c\x7a\xf7\x70\x0a\xb4\x71\x5a\x89\xf8\xa0\xd7\xbd\x18\x05\xcd\xf4\xe9\xb8\x57\x9b\xdc\xab\xda\x22\x3b\x51\x52\x6b\xa9\x58\xc0\x84\x67\x61\x21\xc5\x34\x96\xa9\x7e\x6f\x91\xb6\x26\x8a\x25\x06\x69\x45\xde\x2b\x54\x78\x1c\x30\xe3\x10\x19\xbb\x14\x8f\x18\xd5\x21\x8b\x23\xed\x3e\x29\x22\x29\x44\xda\x0d\x42\x3b\xc1\x01\x94\x23\xb9\xba\x48\x5b\xbb\x6d\xb7\x60\xdc\x7d\x33\xef\x8a\x2d\x22\xed\x10\x2e\x53\x3a\xe0\x58\x41\xbe\x11\x8e\xf0\xc4\xe5\xcc\x5f\xd8\xa6\xea\x54\x9c\xca\xca\x3d\xe6\x42\x0c\x33\x1c\x76\x67\x33\xe7\x3a\xeb\xbc\xbc\xb4\xdd\x62\x64\xad\xed\x16\x91\xd9\xf6\x25\x9d\xee\xae\xad\xb5\x05\x1e\x21\xc2\xb1\xd6\x9e\x25\xf0\xc8\xc7\x0a\x15\x0f\x9b\x62\x35\x44\x7e\x90\x3f\xad\x85\x50\x3e\x2b\x50\xf3\x20\x2c\xc2\xdf\x15\x78\x94\x91\x51\xf6\x4a\x96\xcd\x63\x26\x40\x95\x6b\x17\xe6\x94\x1c\xa3\x28\xd5\x86\x0d\xa6\xf6\x9c\xc7\x26\x20\xcc\x2b\xf8\xe3\x02\x22\xb9\x1d\x53\x1b\xa7\x46\x2e\x20\x3e\xa2\xa2\x34\xf6\xa5\x51\x52\x7c\xc0\xe4\xb8\xb0\x5a\xc2\x28\xd3\x09\xc7\x53\xbb\xb1\x04\x96\x43\x59\x1c\x14\xae\x99\xcd\x9c\x6e\x01\xee\xc5\x38\x80\x97\x17\x0b\x85\xc0\x82\xd0\x78\x56\xb3\x61\x21\xcc\x8d\x67\x59\x25\xed\x80\x4b\x6c\x6c\x0e\x03\x63\xa1\xfc\xd2\x78\x96\x2f\x15\x05\x65\x2b\x4c\x59\xaa\x77\x50\xb5\x99\x4c\xbe\x97\x57\xfb\x63\x7b\xf3\xd5\xaf\x67\x77\xc3\xea\xdc\xb1\xef\x25\x35\x56\x08\xd0\x09\x16\xe5\xb1\x7c\x4c\x03\x40\xf9\xaf\x9d\x28\x16\x63\x35\xb5\xb2\xc0\xb8\xe0\xd8\x0c\xa4\x8a\xb3\xd8\xc8\xf0\xbf\x49\x55\x44\xc5\x6c\xe6\x74\x14\x16\x24\xfc\x9b\x2c\x3a\x25\x04\xb4\x2e\x88\x52\x41\x39\xdc\x82\xd2\x4c\x8a\xbf\xc9\xc7\xc4\x40\xce\xc9\x18\xa7\x67\x69\xec\x83\x5a\x4d\xd5\x76\x33\x0b\xfe\x3a\x9c\x94\xd4\x1c\x30\x5d\x11\x24\xb3\x99\x73\x54\x86\x5b\x17\x8a\xcb\x97\x9f\x7b\xc9\x2e\xc9\x52\xe7\xa9\x72\x97\x38\x0b\x45\x77\x19\xe6\x73\x57\x06\x31\xea\x59\x45\x3e\xc8\x12\x01\x65\xa3\xa5\xa2\x76\x57\x1c\x04\xe7\xeb\x99\x89\xb5\xad\x41\x65\xa5\xe4\x5d\x42\x7e\x6d\xa5\xb9\x8d\x40\xbe\x11\x65\x2c\xe5\x7d\x1e\xe4\x0f\x9f\x4b\x32\x5c\xba\xb6\x28\x17\xef\xf6\xd8\x71\xdd\x7f\x63\x92\xd9\xcc\xa3\x72\x2c\xb8\xc4\xd4\x8e\xb1\x60\x03\xd0\xe6\x5f\xa9\xe2\x5e\x99\x17\x61\x82\xe3\x84\x17\xe9\x90\x09\x6d\x30\xe7\x6e\x09\x74\x12\xce\xb4\x59\xba\xa5\x92\xf9\x0d\x4c\x8d\x59\x9a\x0f\x50\xe1\xc3\x5e\x41\xd8\xc9\x61\xd7\x30\x31\x4b\x1d\x88\x3f\xd8\x6d\x6e\xe4\x25\x7f\xe7\xdd\xd2\x0b\x79\xc2\x3c\xcf\x23\x03\x73\x74\x84\x47\xb8\x9f\x47\xca\x77\x44\x42\x29\x35\x20\x29\x00\xc9\x01\x32\x21\x20\x33\x96\x5f\xf2\x6c\xba\xb8\x0a\x55\x77\x50\x74\x99\x82\x9a\x22\x2c\xe8\x42\xb5\x2e\x6e\x0b\xfa\xca\x04\xe1\x29\x05\x8d\x2e\x64\x92\x80\xfa\x56\xe4\xe3\xa5\xf5\x25\xab\x17\xd1\x53\xc6\x95\xdb\xb2\xe8\xda\x75\x67\xcb\xa9\x3a\x9a\xb3\xb8\x2c\x26\xaf\xba\x7e\xad\xc5\xdd\xc1\x3d\x7d\xae\x85\xe6\xe2\xb0\xc2\x75\xbf\xaf\xb7\xc4\xde\x75\x92\x46\xee\xf3\xb4\xb1\xb7\x71\x7e\x90\xe0\x58\xfe\xbc\x9d\xd6\xb7\x4f\x6f\x3b\x62\x7f\xa3\xe7\xfb\xb7\x0f\x37\x30\xde\x38\x57\x7b\xf7\xf8\x6a\x38\x88\xde\xb8\x57\x54\xe2\xcc\x74\xaf\x95\x6c\x65\x25\xfe\xdc\xbb\x46\xb4\xf8\xaa\xe1\xe7\xf6\xfa\x84\xc4\x50\x6e\x44\xad\x68\x7a\x77\xbc\x3d\x38\xbb\x84\x8d\x1f\xd5\xda\xa1\xbf\xfd\x23\xbc\x7a\xaa\x35\x4f\xd4\xa3\x7b\x94\x90\x9b\x83\x83\x73\xb1\xf1\xd0\xba\xd2\x63\x38\x53\xe6\xcc\x35\xfb\xf5\x53\x79\xdc\x7a\x84\xc7\xee\x74\xf2\x9b\x12\x17\x5c\x5d\x2b\x5d\xbd\x39\x77\xa6\x13\xe9\xcd\x0f\x6e\x3f\xea\xff\x8f\xce\xfd\x27\x9c\xba\x52\xe9\x9b\xd0\xcf\xbb\x32\x29\xa5\xff\x55\x75\xaa\x4d\xa7\x5a\xf8\x32\x8d\x69\x39\xb3\x5a\xc8\x9f\xae\x82\x9f\xd7\x07\x3f\xee\xb6\xeb\xfb\x77\xb5\xab\x6e\x5a\xeb\x57\x6e\x8f\x71\xef\x19\x27\xf5\xc3\x66\x93\x3f\x1e\x6e\x57\x2f\xe4\x03\xff\x19\xfa\x07\x37\x1b\xcd\xce\x63\xd2\x3c\x68\x09\x96\xb6\xea\x5b\xfd\x61\x8b\x9f\xfd\x7f\x85\xfc\xf7\x98\x5c\xad\x64\x5c\xbd\x6c\x48\xf5\x10\x75\x2e\x05\x25\x43\xd9\x3c\x65\xf1\xad\xff\xfc\x50\x31\x41\xd2\x48\xee\x3a\x0d\xfe\xd8\xe2\xaa\x5e\xb9\x3b\x7e\xae\x8c\x94\x8b\xef\x8e\xc3\x7b\xda\x39\x8b\xcf\xfc\xad\xee\x9f\xb5\x51\x4b\x7f\x46\x49\x91\x6a\xe6\x72\xcc\x34\x01\xcf\x32\x30\x31\x6e\x84\x47\xb8\x18\x9d\xa7\x4d\x22\x85\x36\xa8\x28\x30\xc8\x43\x02\xc6\xe8\xf2\x6a\x4f\x52\xf8\x4a\x25\x49\x63\x10\xc6\x09\xc0\xec\x73\xc8\xba\x9d\x69\x8f\x7e\x5d\x2f\xc0\xeb\xdf\x36\xd1\xec\xf5\x3a\x64\xe4\x3b\x68\xcc\x04\x95\x63\x87\x4b\x82\xb3\xa0\x77\xb2\xca\xb0\xf9\x8a\xc9\xbf\x61\x76\x50\x6d\xab\xf9\x36\x56\xbc\x71\x7d\x18\x24\x92\x4b\xd5\xc5\x6a\xb8\x83\xd6\xff\xa8\xe4\x6d\xfd\xc3\xec\x49\xb1\x6c\xfd\x8f\x41\xde\xde\x4d\x2b\x05\xc4\x9c\xc0\x08\xf8\xce\x5c\x8b\xb3\xb7\x30\xe8\x1c\x16\xe0\x97\x6f\xdf\x8b\xc4\xcf\xc1\x20\x51\xc8\x5f\xa9\xf9\x5d\x75\x5b\xff\xf6\x3d\x5f\x98\x2d\xca\x35\x22\x0f\xfd\x66\xfd\xb3\xd0\xc6\x52\x6b\x39\x0a\x12\x8e\x09\x7c\x75\x99\xa0\x30\x71\xb2\x4f\x4f\x77\x13\xad\xbf\xaf\x89\xd9\x01\x16\xf3\x8c\x5b\xbc\xef\xb7\xdd\xe2\xc3\xf6\x3f\x01\x00\x00\xff\xff\x87\xf8\xa8\x93\xe9\x0e\x00\x00")

func templateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateIndexHtml,
		"template/index.html",
	)
}

func templateIndexHtml() (*asset, error) {
	bytes, err := templateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateManifestPlist = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x51\x6b\xdb\x30\x10\xc7\x9f\xed\x4f\xa1\xe9\x5d\x56\xf2\x36\x86\xea\xb2\x36\x2d\x04\xc2\x66\x88\x3b\xd8\xa3\x1a\x5d\xd2\x23\xb2\x6c\xa4\xf3\xb2\xb4\xf4\xbb\x0f\xc7\x6e\xa2\x74\x5e\xd7\x87\xed\x4d\x48\xbf\xff\xdd\xcf\xc7\x59\x5d\xfe\xac\x2c\xfb\x01\x3e\x60\xed\x2e\xf8\x34\x9b\x70\x06\x6e\x55\x1b\x74\x9b\x0b\x7e\x57\xde\x8a\x8f\xfc\x32\x4f\xd5\x87\xd9\xd7\xeb\xf2\x7b\x71\xc3\x1a\x8b\x81\x58\x71\x77\xb5\x98\x5f\x33\x2e\xa4\xfc\xdc\x34\x16\xa4\x9c\x95\x33\x56\x2c\xe6\xcb\x92\x4d\xb3\x89\x94\x37\x5f\x38\xe3\x0f\x44\xcd\x27\x29\x77\xbb\x5d\xa6\x3b\x2a\x5b\xd5\x55\x07\x06\x59\xf8\xba\x01\x4f\xfb\x05\x06\x12\xd3\x6c\x92\x19\x32\x3c\x4f\x55\x5f\xfd\x4c\x27\x4f\x95\xc1\x15\xe5\x69\xa2\xb6\xb0\xcf\x91\xa0\x0a\x4a\x76\xc7\x34\x51\xda\x7b\xdd\x1d\x92\x17\x26\xe9\x29\x1d\x02\xd0\x11\x4b\x22\x30\x46\x07\x78\x8b\xce\x9c\xd0\x24\x51\x81\x3c\xba\x4d\x1e\xea\x35\xed\xb4\x07\xd1\xe8\xd5\x56\x6f\x40\xc9\xe1\x21\xca\xb6\xde\x8e\x45\x9f\x9e\xb2\xe5\x90\x2e\xfa\xf0\xf3\xf3\x79\x5c\xc9\x93\xc6\xbb\x8d\x0c\x86\xc6\xea\xbd\xc0\xea\x0f\x3a\x0e\xc0\x04\x11\x1e\xd0\xc1\x59\x9e\x7c\x0b\xf2\x7d\xde\xb3\xbe\xc7\xbc\xfa\x57\xd2\xeb\xd6\x5a\x11\xf0\x11\xfe\xab\xf6\x6d\x6b\xed\x12\x1f\xe1\x6f\xde\x4a\x9e\x56\xe1\x50\xb2\x02\xd2\x46\x93\x8e\x96\x25\xfa\xc8\xee\xee\xbe\x75\xc6\x82\x40\x03\x8e\x70\x8d\xe0\x23\x85\xc8\xe0\xea\x80\xcd\x8f\xd4\x6f\x12\x51\xad\x61\xc3\xdf\x2a\xf4\xad\x47\x46\xab\xbc\x1a\xf5\xeb\x85\x1d\x49\x84\xf6\x9e\x90\x2c\x8c\x77\x5c\x0e\xaf\xa3\xcd\xde\xc8\x95\x23\xa1\xd3\xac\x8f\xa7\xe3\xcc\x5f\x6e\x94\x3c\xfc\xe8\x79\xfa\x2b\x00\x00\xff\xff\x83\xed\xd1\x1c\x7f\x04\x00\x00")

func templateManifestPlistBytes() ([]byte, error) {
	return bindataRead(
		_templateManifestPlist,
		"template/manifest.plist",
	)
}

func templateManifestPlist() (*asset, error) {
	bytes, err := templateManifestPlistBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/manifest.plist", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/index.html":     templateIndexHtml,
	"template/manifest.plist": templateManifestPlist,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"index.html":     &bintree{templateIndexHtml, map[string]*bintree{}},
		"manifest.plist": &bintree{templateManifestPlist, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
